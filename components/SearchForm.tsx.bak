'use client';

import { useState } from 'react';
import { Paper, SearchParams, CategoryOption } from '@/types/paper';
import axios from 'axios';
import { XMLParser } from 'fast-xml-parser';

// CS Categories data from the original scripts
const CS_CATEGORIES: CategoryOption[] = [
  { id: 'cs.AI', name: 'Artificial Intelligence' },
  { id: 'cs.AR', name: 'Hardware Architecture' },
  { id: 'cs.CC', name: 'Computational Complexity' },
  { id: 'cs.CE', name: 'Computational Engineering' },
  { id: 'cs.CG', name: 'Computational Geometry' },
  { id: 'cs.CL', name: 'Computation and Language' },
  { id: 'cs.CR', name: 'Cryptography and Security' },
  { id: 'cs.CV', name: 'Computer Vision and Pattern Recognition' },
  { id: 'cs.CY', name: 'Computers and Society' },
  { id: 'cs.DB', name: 'Databases' },
  { id: 'cs.DC', name: 'Distributed Computing' },
  { id: 'cs.DL', name: 'Digital Libraries' },
  { id: 'cs.DM', name: 'Discrete Mathematics' },
  { id: 'cs.DS', name: 'Data Structures and Algorithms' },
  { id: 'cs.ET', name: 'Emerging Technologies' },
  { id: 'cs.FL', name: 'Formal Languages and Automata Theory' },
  { id: 'cs.GL', name: 'General Literature' },
  { id: 'cs.GR', name: 'Graphics' },
  { id: 'cs.GT', name: 'Computer Science and Game Theory' },
  { id: 'cs.HC', name: 'Human-Computer Interaction' },
  { id: 'cs.IR', name: 'Information Retrieval' },
  { id: 'cs.IT', name: 'Information Theory' },
  { id: 'cs.LG', name: 'Machine Learning' },
  { id: 'cs.LO', name: 'Logic in Computer Science' },
  { id: 'cs.MA', name: 'Multiagent Systems' },
  { id: 'cs.MM', name: 'Multimedia' },
  { id: 'cs.MS', name: 'Mathematical Software' },
  { id: 'cs.NA', name: 'Numerical Analysis' },
  { id: 'cs.NE', name: 'Neural and Evolutionary Computing' },
  { id: 'cs.NI', name: 'Networking and Internet Architecture' },
  { id: 'cs.OH', name: 'Other Computer Science' },
  { id: 'cs.OS', name: 'Operating Systems' },
  { id: 'cs.PF', name: 'Performance' },
  { id: 'cs.PL', name: 'Programming Languages' },
  { id: 'cs.RO', name: 'Robotics' },
  { id: 'cs.SC', name: 'Symbolic Computation' },
  { id: 'cs.SD', name: 'Sound' },
  { id: 'cs.SE', name: 'Software Engineering' },
  { id: 'cs.SI', name: 'Social and Information Networks' },
  { id: 'cs.SY', name: 'Systems and Control' }
];

// Common CS categories for quick selection
const COMMON_CATEGORIES: CategoryOption[] = [
  { id: 'cs.CR', name: 'Cryptography and Security' },
  { id: 'cs.AI', name: 'Artificial Intelligence' },
  { id: 'cs.CL', name: 'Computation and Language' },
  { id: 'cs.CV', name: 'Computer Vision and Pattern Recognition' },
  { id: 'cs.LG', name: 'Machine Learning' },
  { id: 'cs.NE', name: 'Neural and Evolutionary Computing' },
  { id: 'cs.SI', name: 'Social and Information Networks' },
  { id: 'cs.SE', name: 'Software Engineering' },
  { id: 'cs.DB', name: 'Databases' },
  { id: 'cs.NI', name: 'Networking and Internet Architecture' },
  { id: 'cs.PL', name: 'Programming Languages' },
  { id: 'cs.RO', name: 'Robotics' }
];

// Specialized topic presets from the original script
const TOPIC_PRESETS = [
  {
    id: "RF Analysis",
    name: "RF Analysis",
    description: "Radio frequency analysis, spectrum analysis, RF characterization",
  },
  {
    id: "RF Capture",
    name: "RF Capture",
    description: "RF signal capture, acquisition, and recording techniques",
  },
  {
    id: "RF Simulation",
    name: "RF Simulation",
    description: "Simulation and modeling of radio frequency systems",
  },
  {
    id: "Quantum Cryptography",
    name: "Quantum Cryptography",
    description: "Quantum cryptography, quantum key distribution, post-quantum crypto",
  },
  {
    id: "Classical Cryptography",
    name: "Classical Cryptography",
    description: "Traditional cryptography, encryption algorithms and protocols",
  },
  {
    id: "Web Security",
    name: "Web Security",
    description: "Web application security, vulnerabilities, and protection",
  },
  {
    id: "Social Engineering & Human Factor",
    name: "Social Engineering",
    description: "Social engineering attacks and the human factor in cybersecurity",
  }
];

// Add the functions from the API route directly in the component
function buildApiQuery(searchMode: string, searchField: string, searchTerms: string, categories: string[]) {
  if (searchMode === 'category') {
    // Format: cat:cs.CR AND all:quantum
    const categoryQuery = categories.map(cat => `cat:${cat}`).join('+OR+');
    
    if (!searchTerms || searchTerms.trim() === '') {
      // Just categories, no search terms
      return categoryQuery;
    } else {
      // Categories AND search terms
      const searchQuery = `${searchField}:${encodeURIComponent(searchTerms).replace(/%20/g, '+')}`;
      return `(${categoryQuery})+AND+(${searchQuery})`;
    }
  } else if (searchMode === 'preset') {
    // Not implemented in the queryBuilder but handled separately
    return '';
  } else {
    // Basic search mode: just use the search field and terms
    return `${searchField}:${encodeURIComponent(searchTerms).replace(/%20/g, '+')}`;
  }
}

function extractAuthors(entry: any) {
  if (!entry.author) return [];
  
  // Handle both single author and multiple authors cases
  const authors = Array.isArray(entry.author) ? entry.author : [entry.author];
  return authors.map((author: any) => author.name || 'Unknown');
}

function parseFeed(xml: string, relevanceTopic?: string) {
  const parser = new XMLParser({ 
    ignoreAttributes: false, 
    attributeNamePrefix: '',
    isArray: (name) => ['author', 'link', 'category'].includes(name)
  });
  
  try {
    const json = parser.parse(xml);
    if (!json.feed || !json.feed.entry) {
      return [];
    }
    
    // Handle both single entry and multiple entries
    const entries = Array.isArray(json.feed.entry) ? json.feed.entry : [json.feed.entry];
    
    return entries.map((e: any) => {
      // Extract PDF link
      let pdfLink = null;
      if (e.link) {
        const links = Array.isArray(e.link) ? e.link : [e.link];
        for (const link of links) {
          if (link && link.title === 'pdf' && link.href) {
            pdfLink = link.href.endsWith('.pdf') ? link.href : link.href + '.pdf';
            break;
          }
        }
      }
      
      if (!pdfLink && e.id) {
        // Fallback: construct PDF URL from ID
        pdfLink = e.id.replace('http://arxiv.org/abs/', 'http://arxiv.org/pdf/').replace(/v\d+$/, '') + '.pdf';
      }

      // Extract authors
      const authors = extractAuthors(e);
      
      // Extract categories
      let categories = [];
      if (e.category) {
        categories = Array.isArray(e.category) 
          ? e.category.map((cat: any) => cat.term) 
          : [e.category.term];
      }
      
      // Extract arxiv ID
      const arxivId = e.id ? e.id.split('/').pop() : 'unknown';
      
      // Clean and sanitize text fields
      const title = (e.title || '').replace(/\s+/g, ' ').trim();
      const abstract = e.summary ? e.summary.trim() : 'No abstract available';

      const paper: Paper = {
        title: title,
        abstract: abstract,
        authors: authors,
        authorText: authors.join(', '),
        published: e.published || 'Unknown date',
        updated: e.updated || '',
        pdfUrl: pdfLink,
        arxivId: arxivId,
        categories: categories,
        primaryCategory: categories.length > 0 ? categories[0] : 'Unknown',
      };
      
      // Add relevance scoring for preset topics
      if (relevanceTopic && TOPIC_PRESETS_DATA[relevanceTopic]) {
        paper.relevanceTopic = relevanceTopic;
        paper.relevanceScore = calculateRelevanceScore(title, abstract, relevanceTopic);
      }
      
      return paper;
    });
  } catch (err) {
    console.error('Error parsing XML:', err);
    return [];
  }
}

function calculateRelevanceScore(title: string, abstract: string, topicName: string) {
  const preset = TOPIC_PRESETS_DATA[topicName];
  if (!preset) return 0;
  
  // Combine title and abstract for analysis, with title weighted higher
  const titleText = title.toLowerCase();
  const abstractText = abstract.toLowerCase();
  const combinedText = titleText + " " + titleText + " " + abstractText; // Title counted twice
  
  // Check for required keywords first - if any are missing, immediately lower score
  let hasRequiredKeywords = true;
  if (preset.requiredKeywords && preset.requiredKeywords.length > 0) {
    for (const req of preset.requiredKeywords) {
      if (!combinedText.includes(req.toLowerCase())) {
        hasRequiredKeywords = false;
        break;
      }
    }
  }
  
  // Check for excluded keywords - if any are present, immediately lower score
  let hasExcludedKeywords = false;
  if (preset.excludedKeywords && preset.excludedKeywords.length > 0) {
    for (const excl of preset.excludedKeywords) {
      if (combinedText.includes(excl.toLowerCase())) {
        hasExcludedKeywords = true;
        break;
      }
    }
  }
  
  // Calculate weighted score based on keyword occurrences and weights
  let weightedScore = 0;
  let totalPossibleScore = 0;
  
  for (const [keyword, weight] of Object.entries(preset.keywordWeights)) {
    totalPossibleScore += weight;
    
    // Count occurrences
    let count = 0;
    let pos = combinedText.indexOf(keyword.toLowerCase());
    while (pos !== -1) {
      count++;
      pos = combinedText.indexOf(keyword.toLowerCase(), pos + 1);
    }
    
    // Apply diminishing returns for multiple occurrences
    const keywordScore = count > 0 ? weight * Math.min(1, 0.5 + (count / 5)) : 0;
    weightedScore += keywordScore;
  }
  
  // Normalize score to 0-10 scale
  let normalizedScore = Math.round((weightedScore / totalPossibleScore) * 10);
  
  // Adjust based on required/excluded keywords
  if (!hasRequiredKeywords) {
    normalizedScore = Math.min(normalizedScore, 5); // Cap at 5/10 if missing required keywords
  }
  
  if (hasExcludedKeywords) {
    normalizedScore = Math.min(normalizedScore, 3); // Cap at 3/10 if contains excluded keywords
  }
  
  // Check for title match boost - if topic terms appear in the title, boost the score
  const topicTerms = topicName.toLowerCase().split(' ');
  let titleMatchCount = 0;
  
  for (const term of topicTerms) {
    if (titleText.includes(term)) {
      titleMatchCount++;
    }
  }
  
  if (titleMatchCount >= topicTerms.length / 2) {
    normalizedScore = Math.min(10, normalizedScore + 2); // Boost if half or more terms match in title
  }
  
  // Ensure score is in 0-10 range
  return Math.max(0, Math.min(10, normalizedScore));
}

// Define topic presets data structure (copied from API route)
interface TopicPreset {
  searchTerms: string;
  keywordWeights: Record<string, number>;
  requiredKeywords: string[];
  excludedKeywords: string[];
  categories: string[];
  description: string;
}

// Topic presets from the original code
const TOPIC_PRESETS_DATA: Record<string, TopicPreset> = {
  "RF Analysis": {
    searchTerms: "radio frequency analysis spectrum",
    keywordWeights: {
      "radio": 2,
      "frequency": 2, 
      "analysis": 1.5,
      "spectrum": 2,
      "rf": 3,
      "signal": 1,
      "wireless": 1,
      "antenna": 1,
      "electromagnetic": 1.5
    },
    requiredKeywords: ["radio", "frequency", "rf", "spectrum"],
    excludedKeywords: ["quantum", "cryptography", "web security"],
    categories: ["physics.app-ph", "eess.SP", "cs.IT", "physics.ins-det"],
    description: "Papers on radio frequency analysis including spectrum analysis, RF characterization"
  },
  "RF Capture": {
    searchTerms: "radio frequency capture signal acquisition",
    keywordWeights: {
      "radio": 2,
      "frequency": 2,
      "capture": 2,
      "signal": 2,
      "acquisition": 2,
      "rf": 3,
      "receiver": 1.5,
      "sampler": 1.5,
      "recording": 1.5,
      "measurement": 1
    },
    requiredKeywords: ["radio", "frequency", "signal", "capture"],
    excludedKeywords: ["quantum", "cryptography", "web security"],
    categories: ["eess.SP", "physics.ins-det", "cs.IT"],
    description: "Papers on RF signal capture, acquisition, and recording techniques"
  },
  "RF Simulation": {
    searchTerms: "radio frequency simulation modeling",
    keywordWeights: {
      "radio": 2,
      "frequency": 2,
      "simulation": 3,
      "modeling": 2.5,
      "rf": 3,
      "model": 1.5,
      "electromagnetic": 1.5,
      "propagation": 1.5,
      "circuit": 1
    },
    requiredKeywords: ["radio", "frequency", "simulation", "model"],
    excludedKeywords: ["quantum", "cryptography", "web security"],
    categories: ["physics.comp-ph", "cs.CE", "eess.SP"],
    description: "Papers on simulation and modeling of radio frequency systems"
  },
  "Quantum Cryptography": {
    searchTerms: "quantum cryptography encryption",
    keywordWeights: {
      "quantum": 3,
      "cryptography": 2.5,
      "encryption": 1.5,
      "key": 1,
      "distribution": 1,
      "qkd": 3,
      "qubit": 2,
      "entanglement": 2,
      "security": 1,
      "protocol": 1
    },
    requiredKeywords: ["quantum", "cryptography"],
    excludedKeywords: ["radio frequency", "rf", "web application"],
    categories: ["cs.CR", "quant-ph"],
    description: "Papers on quantum cryptography, quantum key distribution, and post-quantum crypto"
  },
  "Classical Cryptography": {
    searchTerms: "cryptography encryption security",
    keywordWeights: {
      "cryptography": 3,
      "encryption": 2.5,
      "security": 1.5,
      "cipher": 2,
      "algorithm": 1,
      "protocol": 1,
      "key": 1,
      "authentication": 1.5,
      "symmetric": 1.5,
      "asymmetric": 1.5
    },
    requiredKeywords: ["cryptography", "encryption", "security"],
    excludedKeywords: ["quantum", "radio frequency", "rf", "web application"],
    categories: ["cs.CR", "cs.IT"],
    description: "Papers on traditional cryptography, encryption algorithms and protocols"
  },
  "Web Security": {
    searchTerms: "web security vulnerability application",
    keywordWeights: {
      "web": 3,
      "security": 2.5,
      "vulnerability": 2,
      "application": 1.5,
      "attack": 1.5,
      "exploit": 1.5,
      "injection": 1.5,
      "xss": 2,
      "csrf": 2,
      "authentication": 1
    },
    requiredKeywords: ["web", "security"],
    excludedKeywords: ["quantum", "radio frequency", "rf"],
    categories: ["cs.CR", "cs.NI", "cs.SE"],
    description: "Papers on web application security, vulnerabilities, and protection"
  },
  "Social Engineering & Human Factor": {
    searchTerms: "social engineering cybersecurity",
    keywordWeights: {
      "social": 2.5,
      "engineering": 2.5,
      "cybersecurity": 3,
      "phishing": 2,
      "human": 1.5,
      "psychology": 1.5,
      "awareness": 1,
      "behavior": 1
    },
    requiredKeywords: ["social", "engineering"],
    excludedKeywords: [],
    categories: ["cs.CY", "cs.CR", "cs.HC", "cs.SI"],
    description: "Papers on social engineering attacks and the human factor in cybersecurity"
  }
};

interface SearchFormProps {
  setResults: React.Dispatch<React.SetStateAction<Paper[]>>;
  setLoading: React.Dispatch<React.SetStateAction<boolean>>;
  setError: React.Dispatch<React.SetStateAction<string | null>>;
}

export default function SearchForm({ setResults, setLoading, setError }: SearchFormProps) {
  const [searchMode, setSearchMode] = useState<'basic' | 'category' | 'preset'>('basic');
  const [searchField, setSearchField] = useState<'all' | 'ti' | 'au' | 'abs'>('all');
  const [searchTerms, setSearchTerms] = useState('');
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [maxResults, setMaxResults] = useState(10);
  const [selectedPreset, setSelectedPreset] = useState('');
  
  // Clear search terms when switching to preset mode
  const handleSearchModeChange = (mode: 'basic' | 'category' | 'preset') => {
    setSearchMode(mode);
    if (mode === 'preset') {
      setSearchTerms(''); // Clear search terms when using preset
    }
  };

  async function fetchArxivFeed(queryString: string, maxResults: number) {
    try {
      // Using a public API that provides arXiv data with CORS support
      // This endpoint supports direct arxiv queries with CORS headers
      const arxivPublicAPI = `https://arxiv.theloneliestpixel.com/v1/query?q=${queryString}&max_results=${maxResults}`;
      
      console.log('Fetching from:', arxivPublicAPI);
      const response = await axios.get(arxivPublicAPI);
      
      if (response.data && response.data.entries) {
        // Convert the API response to XML format that our parser expects
        const entries = response.data.entries;
        let xmlData = `<feed xmlns="http://www.w3.org/2005/Atom">`;
        
        for (const entry of entries) {
          xmlData += `<entry>`;
          xmlData += `<id>http://arxiv.org/abs/${entry.id}</id>`;
          xmlData += `<title>${escapeXml(entry.title)}</title>`;
          xmlData += `<summary>${escapeXml(entry.summary)}</summary>`;
          xmlData += `<published>${entry.published}</published>`;
          xmlData += `<updated>${entry.updated || entry.published}</updated>`;
          
          // Add authors with correct name tag
          for (const author of entry.authors) {
            xmlData += `<author><name>${escapeXml(author)}</name></author>`;
          }
          
          // Add categories
          for (const category of entry.categories) {
            xmlData += `<category term="${escapeXml(category)}"/>`;
          }
          
          // Add links
          xmlData += `<link title="pdf" href="http://arxiv.org/pdf/${entry.id}.pdf"/>`;
          xmlData += `</entry>`;
        }
        
        xmlData += `</feed>`;
        return xmlData;
      } else {
        // Fallback to direct arXiv API with a different approach
        const fallbackAPI = `https://export.arxiv.org/api/query?search_query=${queryString}&start=0&max_results=${maxResults}`;
        
        // Try using fetch API with no-cors mode as a desperate fallback
        const fallbackResponse = await fetch(fallbackAPI, { 
          method: 'GET',
          mode: 'no-cors', // This will return an opaque response
        });
        
        // Since we'll get an opaque response that we can't read, 
        // return an empty feed and show a message to the user
        console.log('Using fallback method - response might be limited');
        return '<feed></feed>';
      }
    } catch (err) {
      console.error('All API methods failed:', err);
      throw new Error('Failed to fetch data from arXiv. Please try a different search query.');
    }
  }
  
  // Function to escape XML special characters
  function escapeXml(unsafe: string): string {
    return unsafe
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      let papers: Paper[] = [];
      
      if (searchMode === 'preset' && selectedPreset) {
        // Use preset topic
        const presetInfo = TOPIC_PRESETS_DATA[selectedPreset];
        if (!presetInfo) {
          throw new Error('Invalid preset topic');
        }
        
        // Use preset search terms and categories
        const presetSearchTerms = presetInfo.searchTerms;
        const presetCategories = presetInfo.categories;
        
        // Build query using the preset information
        const categoryQuery = presetCategories.map(cat => `cat:${cat}`).join('+OR+');
        const searchQuery = `all:${encodeURIComponent(presetSearchTerms).replace(/%20/g, '+')}`;
        const queryString = `(${categoryQuery})+AND+(${searchQuery})`;
        
        const xml = await fetchArxivFeed(queryString, maxResults);
        papers = parseFeed(xml, selectedPreset);
        
        // Sort by relevance score
        papers.sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0));
      } else {
        // Regular search using searchMode, searchField, searchTerms, categories
        const categories = selectedCategories.length > 0 ? selectedCategories : ['cs.LG'];
        const queryString = buildApiQuery(searchMode, searchField, searchTerms, categories);
        const xml = await fetchArxivFeed(queryString, maxResults);
        
        papers = parseFeed(xml);
        
        // For category searches, ensure papers match the selected categories
        if (searchMode === 'category' && categories.length > 0) {
          papers = papers.filter(paper => {
            // Check if the paper belongs to at least one of the selected categories
            return paper.categories.some(cat => categories.includes(cat));
          });
        }
        
        // Calculate relevance scores for all search modes
        const searchTermsForRelevance = searchTerms.trim().toLowerCase();
        if (searchTermsForRelevance) {
          papers.forEach(paper => {
            const title = paper.title.toLowerCase();
            const abstract = paper.abstract.toLowerCase();
            
            // Count occurrences of search terms in title and abstract
            let score = 0;
            const terms = searchTermsForRelevance.split(/\s+/);
            
            for (const term of terms) {
              if (term.length < 3) continue; // Skip very short terms
              
              // Title matches are worth more
              if (title.includes(term)) {
                score += 3;
              }
              
              // Abstract matches
              if (abstract.includes(term)) {
                score += 1;
              }
            }
            
            // Normalize to a 0-10 scale
            paper.relevanceScore = Math.min(10, Math.round(score));
            paper.relevanceTopic = searchMode === 'category' ? "Category Search" : "Search Terms";
          });
          
          // Sort by relevance score
          papers.sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0));
        } else if (searchMode === 'category') {
          // For category-only searches with no search terms, assign a default score
          papers.forEach(paper => {
            paper.relevanceScore = 7; // Medium-high relevance for category matches
            paper.relevanceTopic = "Category Match";
          });
        }
      }
      
      setResults(papers);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
      setResults([]);
    } finally {
      setLoading(false);
    }
  };
  
  const handleCategoryChange = (categoryId: string) => {
    setSelectedCategories(prev => 
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        Search Options
      </h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Search Mode Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            Search Mode
          </label>
          <div className="flex flex-col space-y-3">
            <label className="inline-flex items-center">
              <input
                type="radio"
                className="form-radio text-primary h-4 w-4"
                name="searchMode"
                value="basic"
                checked={searchMode === 'basic'}
                onChange={() => handleSearchModeChange('basic')}
              />
              <span className="ml-2 text-gray-700 dark:text-gray-200">Basic Search</span>
            </label>
            <label className="inline-flex items-center">
              <input
                type="radio"
                className="form-radio text-primary h-4 w-4"
                name="searchMode"
                value="category"
                checked={searchMode === 'category'}
                onChange={() => handleSearchModeChange('category')}
              />
              <span className="ml-2 text-gray-700 dark:text-gray-200">Search with Categories</span>
            </label>
            <label className="inline-flex items-center">
              <input
                type="radio"
                className="form-radio text-primary h-4 w-4"
                name="searchMode"
                value="preset"
                checked={searchMode === 'preset'}
                onChange={() => handleSearchModeChange('preset')}
              />
              <span className="ml-2 text-gray-700 dark:text-gray-200">Use Specialized Topic Preset</span>
            </label>
          </div>
        </div>
        
        {/* Search Field Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Search In
          </label>
          <select
            className="w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            value={searchField}
            onChange={(e) => setSearchField(e.target.value as any)}
          >
            <option value="all">All Fields</option>
            <option value="ti">Title Only</option>
            <option value="au">Author Only</option>
            <option value="abs">Abstract Only</option>
          </select>
        </div>
        
        {/* Search Terms */}
        <div>
          <label htmlFor="searchTerms" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Search Terms
            {searchMode === 'preset' && (
              <span className="ml-2 text-xs text-amber-600 dark:text-amber-400">
                (Disabled in preset mode - using predefined terms)
              </span>
            )}
          </label>
          <input
            type="text"
            id="searchTerms"
            className={`w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white ${
              searchMode === 'preset' ? 'bg-gray-100 dark:bg-gray-800 opacity-60' : ''
            }`}
            placeholder={searchMode === 'preset' ? 'Using preset search terms...' : 'e.g., quantum computing, neural networks'}
            value={searchTerms}
            onChange={(e) => setSearchTerms(e.target.value)}
            disabled={searchMode === 'preset'}
          />
        </div>
        
        {/* Category Selection */}
        {searchMode === 'category' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Categories
            </label>
            <div className="mt-2 max-h-60 overflow-y-auto p-3 border border-gray-200 dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-800">
              {COMMON_CATEGORIES.map((category) => (
                <div key={category.id} className="flex items-center mb-2">
                  <input
                    type="checkbox"
                    id={category.id}
                    className="form-checkbox text-primary h-4 w-4 rounded-sm border-gray-300 focus:ring-primary"
                    checked={selectedCategories.includes(category.id)}
                    onChange={() => handleCategoryChange(category.id)}
                  />
                  <label htmlFor={category.id} className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                    {category.name} ({category.id})
                  </label>
                </div>
              ))}
            </div>
            <div className="mt-2 text-sm text-gray-500 dark:text-gray-400">
              {selectedCategories.length === 0 
                ? 'No categories selected. Will default to Machine Learning (cs.LG).' 
                : `Selected: ${selectedCategories.join(', ')}`}
            </div>
          </div>
        )}
        
        {/* Preset Selection */}
        {searchMode === 'preset' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Specialized Topic Preset
            </label>
            <select
              className="w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              value={selectedPreset}
              onChange={(e) => setSelectedPreset(e.target.value)}
            >
              <option value="">Select a preset...</option>
              {TOPIC_PRESETS.map((preset) => (
                <option key={preset.id} value={preset.id}>
                  {preset.name} - {preset.description}
                </option>
              ))}
            </select>
          </div>
        )}
        
        {/* Max Results */}
        <div>
          <label htmlFor="maxResults" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Maximum Results
          </label>
          <input
            type="number"
            id="maxResults"
            className="w-full px-3 py-2.5 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            min="1"
            max="100"
            value={maxResults}
            onChange={(e) => setMaxResults(parseInt(e.target.value))}
          />
        </div>
        
        {/* Submit Button */}
        <button
          type="submit"
          className="w-full bg-gradient-to-r from-primary to-secondary text-white font-medium py-3 px-4 rounded-lg hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-150 shadow-md flex items-center justify-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          Search Papers
        </button>
      </form>
    </div>
  );
} 